#pragma once

// clang-format off

// This file is generated by Jack

#include <cstdint>
#include <RED4ext/Common.hpp>
#include <RED4ext/CName.hpp>
#include <RED4ext/Handle.hpp>
#include <RED4ext/NativeTypes.hpp>
#include <RED4ext/Scripting/Natives/Generated/ink/EHorizontalAlign.hpp>
#include <RED4ext/Scripting/Natives/Generated/ink/EVerticalAlign.hpp>
#include <RED4ext/Scripting/Natives/Generated/ink/LeafWidget.hpp>
#include <RED4ext/Scripting/Natives/Generated/text/HorizontalAlignment.hpp>
#include <RED4ext/Scripting/Natives/Generated/text/JustificationType.hpp>
#include <RED4ext/Scripting/Natives/Generated/text/LetterCase.hpp>
#include <RED4ext/Scripting/Natives/Generated/text/OverflowPolicy.hpp>
#include <RED4ext/Scripting/Natives/Generated/text/VerticalAlignment.hpp>
#include <RED4ext/Scripting/Natives/Generated/text/WrappingInfo.hpp>
#include <RED4ext/Scripting/Natives/Generated/ink/LinearWipeEffect.hpp>

namespace RED4ext
{
namespace ink { struct FontFamilyResource; }
namespace rend { struct Font; }

namespace ink
{
struct __declspec(align(0x10)) TextWidget : ink::LeafWidget
{
    static constexpr const char* NAME = "inkTextWidget";
    static constexpr const char* ALIAS = "inkText";

    virtual void sub_248(); // creates unk310
    virtual void UpdateText(CString *, uint64_t);
    virtual void sub_258(void *, char); // sanitizes input & sets text
    virtual void sub_260(); // render text? called after font & set are set
    virtual void sub_268(uint8_t);

    uint8_t unk200[0x228 - 0x200];                                  // 200
    CString text;                                                   // 228
    CName textIdKey;                                                // 248
    RaRef<ink::FontFamilyResource> fontFamily;                      // 250
    CName fontStyle;                                                // 258
    uint32_t fontSize;                                              // 260
    uint8_t unk264[0x268 - 0x264];                                  // 264
    ink::EHorizontalAlign contentHAlign;                            // 268
    ink::EVerticalAlign contentVAlign;                              // 269
    uint8_t unk26A[6];                                              // 26A
    Handle<IScriptable> unk270;                                     // 270 inkFontFamilyResource
    Handle<rend::Font> font;                                        // 280
    uint8_t unk290[0x2C8 - 0x290];                                  // 290
    text::LetterCase letterCase;                                    // 2C8
    uint8_t unk2C9[0x2D0 - 0x2C9];                                  // 2C9
    uint32_t tracking;                                              // 2D0
    bool lockFontInGame;                                            // 2D4
    uint8_t unk2D5[0x2D8 - 0x2D5];                                  // 2D5
    LocalizationString localizationString;                          // 2D8
    Handle<LinearWipeEffect> linearWipeEffect;                      // 300
    void * unk310;                                                  // 310 rendering related
    uint8_t unk318[24];                                             // 318
    float lineHeightPercentage;                                     // 330
    float unk334;                                                   // 334
    float scrollTextSpeed;                                          // 338
    uint16_t scrollDelay;                                           // 33C
    uint8_t unk33E[0x350 - 0x33E];                                  // 33E
    text::WrappingInfo wrappingInfo;                                // 350
    text::JustificationType justification;                          // 35C
    text::VerticalAlignment textVerticalAlignment;                  // 35D
    text::HorizontalAlignment textHorizontalAlignment;              // 35E
    uint8_t rightToLeft;                                            // 35F
    text::OverflowPolicy textOverflowPolicy;                        // 360
    uint8_t unk361[15];                                             // 361
    float textColor[4];                                             // 370
    uint8_t unk380[162];                                            // 380
    uint8_t unk422;                                                 // 422
    uint8_t unk423;                                                 // 423
    SharedMutex textMutex;                                          // 424
    uint8_t unk425[3];                                              // 425
    uint32_t unk428;                                                // 428
    uint8_t unk42C[4];                                              // 42C
}; 
RED4EXT_ASSERT_SIZE(TextWidget, 0x430);
} // namespace ink
using inkTextWidget = ink::TextWidget;
using inkText = ink::TextWidget;
} // namespace RED4ext

// clang-format on
